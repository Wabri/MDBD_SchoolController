<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>wabri</groupId>
	<artifactId>SchoolController</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>SchoolController</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<jongo.version>1.3.0</jongo.version>
		<mongo.driver.version>2.14.3</mongo.driver.version>
		<docker.maven.plugin.version>0.23.0</docker.maven.plugin.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>1.10.19</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>${mongo.driver.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jongo</groupId>
			<artifactId>jongo</artifactId>
			<version>${jongo.version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.fakemongo</groupId>
			<artifactId>fongo</artifactId>
			<version>1.6.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>standard</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.1</version>
						<configuration>
							<source>1.8</source>
							<target>1.8</target>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-shade-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>shade</goal>
								</goals>
								<configuration>
									<shadedArtifactAttached>true</shadedArtifactAttached>
									<shadedClassifierName>all</shadedClassifierName>
									<transformers>
										<transformer
											implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
											<mainClass>wabri.SchoolController.app.Main</mainClass>
										</transformer>
									</transformers>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker.maven.plugin.version}</version>
						<configuration>
							<images>
								<image>
									<name>mongo</name>
									<run>
										<ports>
											<port>27017:27017</port>
										</ports>
									</run>
								</image>
								<image>
									<name>school-app</name>
									<build>
										<dockerFileDir>${project.basedir}/docker</dockerFileDir>
										<args>
											<fatjar>${project.artifactId}-${project.version}-all.jar</fatjar>
										</args>
										<assembly>
											<inline>
												<files>
													<file>
														<source>${project.build.directory}/${project.artifactId}-${project.version}-all.jar</source>
													</file>
												</files>
											</inline>
										</assembly>
									</build>
									<run>
										<!-- check that we can run our image, linked with the MongoDB image -->
										<links>
											<link>mongo:mongo-host</link>
										</links>
										<wait>
											<!-- Wait for the output "School app terminates" for 10 seconds -->
											<time>10000</time>
											<log>School-app terminates</log>
										</wait>
									</run>
								</image>
							</images>
							<showLogs>true</showLogs>
						</configuration>
						<executions>
							<execution>
								<id>docker:build</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>docker:start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>docker:stop</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.6.0</version>
						<executions>
							<execution>
								<id>runJarWithDependencies</id>
								<phase>integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>java</executable>
							<arguments>
								<argument>-jar</argument>
								<argument>${project.build.directory}/${project.artifactId}-${project.version}-all.jar</argument>
							</arguments>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>2.20.1</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- This assumes that the Docker image for our app has already been built. 
				That is, the standard profile has already been executed. -->
			<id>docker-compose</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<skipTests>true</skipTests>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker.maven.plugin.version}</version>
						<configuration>
							<images>
								<image>
									<alias>app</alias>
									<external>
										<type>compose</type>
										<basedir>.</basedir>
									</external>
									<run>
										<wait>
											<!-- Wait for the output "School app terminates" for 10 seconds -->
											<time>10000</time>
											<log>School-app terminates</log>
										</wait>
									</run>
								</image>
							</images>
							<showLogs>true</showLogs>
						</configuration>
						<executions>
							<execution>
								<id>docker:start</id>
								<phase>verify</phase>
								<goals>
									<goal>start</goal>
									<!-- Stop the container(s) even if the wait condition failed. Otherwise 
										the background servers will be still running. -->
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>